name: Deploy
on:
  push:
    branches:
      - devnet
jobs:
  deploy:
    name: Release
    runs-on: ubuntu-latest
    environment: devnet
    steps:
      - uses: actions/checkout@master
      - name: Downloading elys
        run: |
          URL=https://github.com/elys-network/elys/releases/download/v0.29.26/elysd-v0.29.26-linux-amd64
          wget $URL -O elysd
          chmod +x elysd
          ls
      - name: Compile with Docker
          # build wasm files
          run: |
            ./scripts/build.sh
      - name: Deploy
        run: |
            # helper functions
            extract_txhash() { awk -F 'txhash: ' '/txhash:/{print $2; exit}'; }
            extract_code_id() { awk -F 'key: code_id|value: ' '/key: code_id/ { getline; gsub(/"/, "", $2); print $2; exit }'; }
            extract_contract_address() { awk -F 'key: _contract_address|value: ' '/key: _contract_address/ { getline; gsub(/"/, "", $2); print $2; exit }'; }
            extract_account_number() { awk -F 'account_number: ' '/account_number:/ { gsub(/"/, "", $2); print $2 + 0; exit; }'; }
            extract_sequence() { awk -F 'sequence: ' '/sequence:/ { gsub(/"/, "", $2); print $2 + 0; exit; }'; }
            wait_for_tx() {
                local txhash=$1
                # loop until query tx cli does not fail
                while ! elysd q tx $txhash --node "$NODE" &> /dev/null; do
                    echo "Waiting for the transaction $txhash to be included in a block..."
                    sleep 0.5
                done
            }

            # environment variables
            NODE=https://rpc.devnet.elys.network:443
            NAME=mallorca

            # contract addresses enviroment variables

            ELYSD=./elysd

            # set elysd config
            $ELYSD config keyring-backend test
            $ELYSD config node $NODE
            $ELYSD config chain-id elysdevnet-1
            $ELYSD config broadcast-mode sync

            # save private keys to files
            echo "${{ secrets.PRIVATE_KEY_MALLORCA }}" > /tmp/private_key_mallorca.txt
            # recover keys

            echo "${{ secrets.PASSPHRASE_MALLORCA }}" | $ELYSD keys import mallorca --keyring-backend test /tmp/private_key_mallorca.txt

            user_address=$(echo "${{ secrets.PASSPHRASE_MALLORCA }}" | $ELYSD keys show $NAME -a)

            # get account and sequence number
            account_number=$($ELYSD q account $user_address --node $NODE | extract_account_number)
            sequence=$($ELYSD q account $user_address --node $NODE | extract_sequence)

            echo "account_number: $account_number"
            echo "sequence: $sequence"


            # environment variables
            OPTIONS="--from $NAME --gas auto --gas-adjustment 1.3 --fees 300000uelys -y --account-number $account_number -b async"

            echo $OPTIONS

            # store and init/migrate financial snapshot contract
            txhash=$($ELYSD tx wasm store $OPTIONS --sequence $(($sequence + 1)) artifacts/financial_snapshot_contract.wasm | extract_txhash)
            echo "fs store txhash: $txhash"
            wait_for_tx $txhash
            codeid=$($ELYSD q tx $txhash --node $NODE | extract_code_id)
            echo "fs code id: $codeid"
            if [ -n "$FS_CONTRACT_ADDRESS" ]; then
                txhash=$( echo "${{ secrets.PASSPHRASE_MALLORCA }}" | $ELYSD tx wasm migrate $OPTIONS --sequence $(($sequence + 2)) $FS_CONTRACT_ADDRESS $codeid '{}' | extract_txhash)
                echo "fs migrate txhash: $txhash"
            else
                txhash=$( echo "${{ secrets.PASSPHRASE_MALLORCA }}" | $ELYSD tx wasm init $OPTIONS --sequence $(($sequence + 2)) --label "fs" --admin $NAME $codeid '{}' | extract_txhash)
                echo "fs init txhash: $txhash"
            fi
            wait_for_tx $txhash
            export fs_contract_address=$($ELYSD q tx $txhash --node $NODE | extract_contract_address)
            echo "fs_contract_address: $fs_contract_address"

            # store and init/migrate trade shield contract
            txhash=$($ELYSD tx wasm store $OPTIONS --sequence $(($sequence + 3)) artifacts/trade_shield_contract.wasm | extract_txhash)
            echo "ts store txhash: $txhash"
            wait_for_tx $txhash
            codeid=$($ELYSD q tx $txhash --node $NODE | extract_code_id)
            echo "ts code id: $codeid"
            if [ -n "$TS_CONTRACT_ADDRESS" ]; then
                txhash=$($ELYSD tx wasm migrate $OPTIONS --sequence $(($sequence + 4)) $TS_CONTRACT_ADDRESS $codeid '{
                    "account_history_address": "'"$AH_CONTRACT_ADDRESS"'"
                }' | extract_txhash)
                echo "ts migrate txhash: $txhash"
            else
                # set localnet AH deterministic address as param
                txhash=$($ELYSD tx wasm init $OPTIONS --sequence $(($sequence + 4)) --label "ts" --admin $NAME $codeid '{
                    "account_history_address": "elys17p9rzwnnfxcjp32un9ug7yhhzgtkhvl9jfksztgw5uh69wac2pgs98tvuy"
                }' | extract_txhash)
                echo "ts init txhash: $txhash"
            fi
            wait_for_tx $txhash
            export ts_contract_address=$($ELYSD q tx $txhash --node $NODE | extract_contract_address)
            echo "ts_contract_address: $ts_contract_address"

            # store and init/migrate account history contract
            txhash=$($ELYSD tx wasm store artifacts/account_history_contract.wasm $OPTIONS --sequence $(($sequence + 5)) | extract_txhash)
            echo "ah store txhash: $txhash"
            wait_for_tx $txhash
            codeid=$($ELYSD q tx $txhash --node $NODE | extract_code_id)
            echo "ah code id: $codeid"
            if [ -n "$AH_CONTRACT_ADDRESS" ]; then
                txhash=$($ELYSD tx wasm migrate $OPTIONS --sequence $(($sequence + 6)) $AH_CONTRACT_ADDRESS $codeid '{
                    "trade_shield_address": "'"$TS_CONTRACT_ADDRESS"'",
                    "limit": 1
                }' | extract_txhash)
                echo "ah migrate txhash: $txhash"
            else
                txhash=$($ELYSD tx wasm init $OPTIONS --sequence $(($sequence + 6)) --label "ah" --admin $NAME $codeid '{
                    "limit": 300,
                    "expiration": {
                        "at_time": "604800000000000"
                    },
                    "trade_shield_address": "'"$ts_contract_address"'"
                }' | extract_txhash)
                echo "ah init txhash: $txhash"
            fi
            wait_for_tx $txhash
            ah_contract_address=$($ELYSD q tx $txhash --node $NODE | extract_contract_address)
            echo "ah_contract_address: $ah_contract_address"

            # print environment variables to set
            printf "\nset those environment variables to use the contracts:\n\n"
            printf "export NODE=%s\n" "$NODE"
            printf "export NAME=%s\n" "$NAME"
            printf "export FS_CONTRACT_ADDRESS=%s\n" "$fs_contract_address"
            printf "export TS_CONTRACT_ADDRESS=%s\n" "$ts_contract_address"
            printf "export AH_CONTRACT_ADDRESS=%s\n" "$ah_contract_address"

